import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams, MenuController } from 'ionic-angular';

/**
 * Generated class for the JeuPlayPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-jeu-play',
  templateUrl: 'jeu-play.html',
})
export class JeuPlayPage {

  menus: {
    case: number,
    index: number,
    click: number,
    image: string,
  }[][];
  item: any;
  matrice: any;
  name: any;
  showImage:any = false;
  coups: number = 0;
  min: number = 0;
  sec: number = 0;
  hour: number = 0;
  hasWin : boolean = false;
  constructor(public menuCtrl: MenuController, public navCtrl: NavController, public navParams: NavParams) {
    this.item = navParams.get('item');
    if(this.item)
      this.setConfigGame(this.item.matrice,this.item.name);
    else
      this.setConfigGame(3, "bobleponge");
    var _this = this;

    setInterval(
      function () {
        _this.sec++;
        if (_this.sec == 60) {
          _this.min++;
          _this.sec = 0;
        }
        if (_this.min == 60) {
          _this.hour++;
          _this.min = 0;
        }
      }, 
      1000);
  }

  win(){
    let i,j;
    for(j=0;j<this.matrice;j++){
      for(i=0;i<this.matrice;i++){
        if(this.menus[i][j].case != this.menus[i][j].index)
          return false;
      }
    }
    return true;
  }
  setConfigGame(matrice, name) {
    this.matrice = matrice;
    this.name = name;
    let i,j;
    var lists;
    let randomnumber:number, taille :number;
    var list=[];
    if(matrice==3){
      list.push( [3,1,5,2,8,7,6,0,4]);list.push( [3,1,5,2,8,7,0,6,4]);list.push( [3,1,5,0,8,7,2,6,4]);list.push( [0,1,5,3,8,7,2,6,4]);list.push( [1,0,5,3,8,7,2,6,4]);list.push( [1,8,5,3,0,7,2,6,4]);list.push( [1,8,5,0,3,7,2,6,4]);list.push( [0,8,5,1,3,7,2,6,4]);list.push( [8,0,5,1,3,7,2,6,4]);list.push( [8,3,5,1,0,7,2,6,4]);list.push( [8,3,5,1,6,7,2,0,4]);list.push( [8,3,5,1,6,7,0,2,4]);list.push( [8,3,5,0,6,7,1,2,4]);list.push( [8,3,5,6,0,7,1,2,4]);list.push( [8,3,5,6,2,7,1,0,4]);list.push( [8,3,5,6,2,7,1,4,0]);list.push( [8,3,5,6,2,0,1,4,7]);list.push( [8,3,5,6,0,2,1,4,7]);list.push( [8,0,5,6,3,2,1,4,7]);list.push( [8,5,0,6,3,2,1,4,7]);list.push( [8,5,2,6,3,0,1,4,7]);list.push( [8,5,2,6,0,3,1,4,7]);list.push( [8,5,2,6,4,3,1,0,7]);list.push( [8,5,2,6,4,3,0,1,7]);list.push( [8,5,2,0,4,3,6,1,7]);list.push( [0,5,2,8,4,3,6,1,7]);list.push( [5,0,2,8,4,3,6,1,7]);list.push( [5,4,2,8,0,3,6,1,7]);list.push( [5,4,2,0,8,3,6,1,7]);list.push( [5,4,2,6,8,3,0,1,7]);list.push( [5,4,2,6,8,3,1,0,7]);list.push( [5,4,2,6,0,3,1,8,7]);list.push( [5,4,2,6,3,0,1,8,7]);list.push( [5,4,2,6,3,7,1,8,0]);list.push( [5,4,2,6,3,7,1,0,8]);list.push( [5,4,2,6,0,7,1,3,8]);list.push( [5,4,2,6,7,0,1,3,8]);list.push( [5,4,0,6,7,2,1,3,8]);list.push( [5,0,4,6,7,2,1,3,8]);list.push( [5,7,4,6,0,2,1,3,8]);list.push( [5,7,4,0,6,2,1,3,8]);list.push( [0,7,4,5,6,2,1,3,8]);list.push( [7,0,4,5,6,2,1,3,8]);list.push( [7,6,4,5,0,2,1,3,8]);list.push( [7,6,4,5,2,0,1,3,8]);list.push( [7,6,4,5,2,8,1,3,0]);list.push( [7,6,4,5,2,8,1,0,3]);list.push( [7,6,4,5,2,8,0,1,3]);list.push( [7,6,4,0,2,8,5,1,3]);list.push( [0,6,4,7,2,8,5,1,3]);list.push( [6,0,4,7,2,8,5,1,3]);list.push( [6,4,0,7,2,8,5,1,3]);
    }else if(matrice==4){
        list.push( [1,5,2,3,4,6,10,7,8,13,9,11,12,14,15,0]);list.push( [1,5,2,3,4,6,10,7,8,13,9,0,12,14,15,11]);list.push( [1,5,2,3,4,6,10,7,8,13,0,9,12,14,15,11]);list.push( [1,5,2,3,4,6,0,7,8,13,10,9,12,14,15,11]);list.push( [1,5,2,3,4,0,6,7,8,13,10,9,12,14,15,11]);list.push( [1,5,2,3,4,13,6,7,8,0,10,9,12,14,15,11]);list.push( [1,5,2,3,4,13,6,7,0,8,10,9,12,14,15,11]);list.push( [1,5,2,3,0,13,6,7,4,8,10,9,12,14,15,11]);list.push( [1,5,2,3,13,0,6,7,4,8,10,9,12,14,15,11]);list.push( [1,0,2,3,13,5,6,7,4,8,10,9,12,14,15,11]);list.push( [0,1,2,3,13,5,6,7,4,8,10,9,12,14,15,11]);list.push( [13,1,2,3,0,5,6,7,4,8,10,9,12,14,15,11]);list.push( [13,1,2,3,5,0,6,7,4,8,10,9,12,14,15,11]);list.push( [13,1,2,3,5,8,6,7,4,0,10,9,12,14,15,11]);list.push( [13,1,2,3,5,8,6,7,4,14,10,9,12,0,15,11]);list.push( [13,1,2,3,5,8,6,7,4,14,10,9,12,15,0,11]);list.push( [13,1,2,3,5,8,6,7,4,14,0,9,12,15,10,11]);list.push( [13,1,2,3,5,8,6,7,4,0,14,9,12,15,10,11]);list.push( [13,1,2,3,5,0,6,7,4,8,14,9,12,15,10,11]);list.push( [13,0,2,3,5,1,6,7,4,8,14,9,12,15,10,11]);list.push( [13,2,0,3,5,1,6,7,4,8,14,9,12,15,10,11]);list.push( [13,2,6,3,5,1,0,7,4,8,14,9,12,15,10,11]);list.push( [13,2,6,3,5,1,14,7,4,8,0,9,12,15,10,11]);list.push( [13,2,6,3,5,1,14,7,4,0,8,9,12,15,10,11]);list.push( [13,2,6,3,5,0,14,7,4,1,8,9,12,15,10,11]);list.push( [13,2,6,3,0,5,14,7,4,1,8,9,12,15,10,11]);list.push( [13,2,6,3,4,5,14,7,0,1,8,9,12,15,10,11]);list.push( [13,2,6,3,4,5,14,7,12,1,8,9,0,15,10,11]);list.push( [13,2,6,3,4,5,14,7,12,1,8,9,15,0,10,11]);list.push( [13,2,6,3,4,5,14,7,12,1,8,9,15,10,0,11]);list.push( [13,2,6,3,4,5,14,7,12,1,0,9,15,10,8,11]);list.push( [13,2,6,3,4,5,14,7,12,0,1,9,15,10,8,11]);list.push( [13,2,6,3,4,0,14,7,12,5,1,9,15,10,8,11]);list.push( [13,2,6,3,4,14,0,7,12,5,1,9,15,10,8,11]);list.push( [13,2,6,3,4,14,7,0,12,5,1,9,15,10,8,11]);list.push( [13,2,6,3,4,14,7,9,12,5,1,0,15,10,8,11]);list.push( [13,2,6,3,4,14,7,9,12,5,1,11,15,10,8,0]);list.push( [13,2,6,3,4,14,7,9,12,5,1,11,15,10,0,8]);list.push( [13,2,6,3,4,14,7,9,12,5,0,11,15,10,1,8]);list.push( [13,2,6,3,4,14,0,9,12,5,7,11,15,10,1,8]);list.push( [13,2,6,3,4,14,9,0,12,5,7,11,15,10,1,8]);list.push( [13,2,6,3,4,14,9,11,12,5,7,0,15,10,1,8]);list.push( [13,2,6,3,4,14,9,11,12,5,0,7,15,10,1,8]);list.push( [13,2,6,3,4,14,0,11,12,5,9,7,15,10,1,8]);list.push( [13,2,0,3,4,14,6,11,12,5,9,7,15,10,1,8]);list.push( [13,0,2,3,4,14,6,11,12,5,9,7,15,10,1,8]);list.push( [13,14,2,3,4,0,6,11,12,5,9,7,15,10,1,8]);list.push( [13,14,2,3,0,4,6,11,12,5,9,7,15,10,1,8]);list.push( [13,14,2,3,12,4,6,11,0,5,9,7,15,10,1,8]);list.push( [13,14,2,3,12,4,6,11,5,0,9,7,15,10,1,8]);list.push( [13,14,2,3,12,0,6,11,5,4,9,7,15,10,1,8]);list.push( [13,0,2,3,12,14,6,11,5,4,9,7,15,10,1,8]);list.push( [0,13,2,3,12,14,6,11,5,4,9,7,15,10,1,8]);list.push( [12,13,2,3,0,14,6,11,5,4,9,7,15,10,1,8]);list.push( [12,13,2,3,14,0,6,11,5,4,9,7,15,10,1,8]);list.push( [12,13,2,3,14,6,0,11,5,4,9,7,15,10,1,8]);list.push( [12,13,2,3,14,6,9,11,5,4,0,7,15,10,1,8]);list.push( [12,13,2,3,14,6,9,11,5,0,4,7,15,10,1,8]);list.push( [12,13,2,3,14,6,9,11,5,10,4,7,15,0,1,8]);list.push( [12,13,2,3,14,6,9,11,5,10,4,7,15,1,0,8]);list.push( [12,13,2,3,14,6,9,11,5,10,0,7,15,1,4,8]);list.push( [12,13,2,3,14,6,9,11,5,10,7,0,15,1,4,8]);list.push( [12,13,2,3,14,6,9,0,5,10,7,11,15,1,4,8]);list.push( [12,13,2,0,14,6,9,3,5,10,7,11,15,1,4,8]);list.push( [12,13,0,2,14,6,9,3,5,10,7,11,15,1,4,8]);list.push( [12,13,9,2,14,6,0,3,5,10,7,11,15,1,4,8]);list.push( [12,13,9,2,14,0,6,3,5,10,7,11,15,1,4,8]);list.push( [12,13,9,2,14,10,6,3,5,0,7,11,15,1,4,8]);list.push( [12,13,9,2,14,10,6,3,0,5,7,11,15,1,4,8]);list.push( [12,13,9,2,0,10,6,3,14,5,7,11,15,1,4,8]);list.push( [0,13,9,2,12,10,6,3,14,5,7,11,15,1,4,8]);
    }else if(matrice==5){
        list.push( [1,2,7,3,4,5,6,13,12,9,10,11,0,8,14,15,16,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,5,6,13,12,9,10,0,11,8,14,15,16,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,5,0,13,12,9,10,6,11,8,14,15,16,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,0,5,13,12,9,10,6,11,8,14,15,16,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,10,5,13,12,9,0,6,11,8,14,15,16,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,6,11,8,14,0,16,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,6,11,8,14,16,0,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,0,11,8,14,16,6,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,0,8,14,16,6,17,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,17,8,14,16,6,0,18,19,20,21,22,23,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,17,8,14,16,6,22,18,19,20,21,0,23,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,17,8,14,16,6,22,18,19,20,21,23,0,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,17,8,14,16,6,22,0,19,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,17,8,14,16,6,0,22,19,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,0,8,14,16,6,17,22,19,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,8,0,14,16,6,17,22,19,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,8,14,0,16,6,17,22,19,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,8,14,19,16,6,17,22,0,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,8,14,19,16,6,17,0,22,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,12,9,15,11,8,0,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,0,9,15,11,8,12,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,7,3,4,10,5,13,9,0,15,11,8,12,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,7,3,0,10,5,13,9,4,15,11,8,12,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,7,0,3,10,5,13,9,4,15,11,8,12,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,0,7,3,10,5,13,9,4,15,11,8,12,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,10,5,0,9,4,15,11,8,12,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,10,5,8,9,4,15,11,0,12,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,10,5,8,9,4,15,11,12,0,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,10,5,8,0,4,15,11,12,9,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,10,5,0,8,4,15,11,12,9,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,10,0,5,8,4,15,11,12,9,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,0,10,5,8,4,15,11,12,9,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,0,11,12,9,19,16,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,11,12,9,19,0,6,17,14,22,20,21,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,11,12,9,19,20,6,17,14,22,0,21,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,11,12,9,19,20,6,17,14,22,21,0,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,11,12,9,19,20,0,17,14,22,21,6,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,0,12,9,19,20,11,17,14,22,21,6,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,12,0,9,19,20,11,17,14,22,21,6,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,12,17,9,19,20,11,0,14,22,21,6,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,12,17,9,19,20,11,14,0,22,21,6,23,18,24]);list.push( [1,2,13,7,3,15,10,5,8,4,16,12,17,0,19,20,11,14,9,22,21,6,23,18,24]);list.push( [1,2,13,7,3,15,10,5,0,4,16,12,17,8,19,20,11,14,9,22,21,6,23,18,24]);list.push( [1,2,13,0,3,15,10,5,7,4,16,12,17,8,19,20,11,14,9,22,21,6,23,18,24]);list.push( [1,2,0,13,3,15,10,5,7,4,16,12,17,8,19,20,11,14,9,22,21,6,23,18,24]);list.push( [1,0,2,13,3,15,10,5,7,4,16,12,17,8,19,20,11,14,9,22,21,6,23,18,24]);list.push( [0,1,2,13,3,15,10,5,7,4,16,12,17,8,19,20,11,14,9,22,21,6,23,18,24]);list.push( [15,1,2,13,3,0,10,5,7,4,16,12,17,8,19,20,11,14,9,22,21,6,23,18,24]);list.push( [15,1,2,13,3,10,0,5,7,4,16,12,17,8,19,20,11,14,9,22,21,6,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,16,0,17,8,19,20,11,14,9,22,21,6,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,16,11,17,8,19,20,0,14,9,22,21,6,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,16,11,17,8,19,0,20,14,9,22,21,6,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,16,11,17,8,19,21,20,14,9,22,0,6,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,16,11,17,8,19,21,20,14,9,22,6,0,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,16,11,17,8,19,21,0,14,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,16,0,17,8,19,21,11,14,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,0,16,17,8,19,21,11,14,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,21,16,17,8,19,0,11,14,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,21,16,17,8,19,11,0,14,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,21,16,17,8,19,11,14,0,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,21,16,0,8,19,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,5,7,4,21,16,8,0,19,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,5,0,4,21,16,8,7,19,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,0,5,4,21,16,8,7,19,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,8,5,4,21,16,0,7,19,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,8,5,4,21,16,7,0,19,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,8,5,4,21,16,7,19,0,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,8,5,0,21,16,7,19,4,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,13,3,10,12,8,0,5,21,16,7,19,4,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,0,3,10,12,8,13,5,21,16,7,19,4,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,3,0,10,12,8,13,5,21,16,7,19,4,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,3,5,10,12,8,13,0,21,16,7,19,4,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,7,19,0,11,14,17,9,22,6,20,23,18,24]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,7,19,22,11,14,17,9,0,6,20,23,18,24]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,7,19,22,11,14,17,0,9,6,20,23,18,24]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,7,19,22,11,14,17,18,9,6,20,23,0,24]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,7,19,22,11,14,17,18,9,6,20,23,24,0]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,7,19,22,11,14,17,18,0,6,20,23,24,9]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,7,19,22,11,14,17,0,18,6,20,23,24,9]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,7,19,22,11,14,0,17,18,6,20,23,24,9]);list.push( [15,1,2,3,5,10,12,8,13,4,21,16,0,19,22,11,14,7,17,18,6,20,23,24,9]);list.push( [15,1,2,3,5,10,12,0,13,4,21,16,8,19,22,11,14,7,17,18,6,20,23,24,9]);list.push( [15,1,2,3,5,10,12,13,0,4,21,16,8,19,22,11,14,7,17,18,6,20,23,24,9]);list.push( [15,1,2,3,5,10,12,13,19,4,21,16,8,0,22,11,14,7,17,18,6,20,23,24,9]);
    }
    taille = list.length;
    randomnumber = Math.floor(Math.random() * (taille));
    lists = list[randomnumber];
    var menus = [];
    // lists = [0,1,2,3,4,5,6,7,8];
    for(j=0;j<matrice;j++){
      let row : {
        case: number,
        index: number,
        click: number,
        image: string,
      }[] = [];
      for(i=0;i<matrice;i++){
        console.log("("+i+","+j+","+matrice+")="+(i+j*matrice)+' -> '+ lists[i+j*matrice]);
        row.push(
          {
            case: i+j*matrice,
            index: lists[i+j*matrice],
            click: 0,
            image: "assets/images/jeu/" + matrice + "/" + name + "/"+lists[i+j*matrice]+".jpg",
          }
        );
      }
      menus.push(row);
    }
    console.log(menus);
    this.menus = menus;
  }
  viewDetail(e) {
    this.navCtrl.push('JeuMenuPage', { item: e });
  }
  canMove(e) {
    let i: number, j: number, x: number, y: number, cases: number;
    for (i = 0; i < this.menus.length; i++) {
      for (j = 0; j < this.menus[i].length; j++) {
        if (this.menus[i][j].index == 0) {
          cases = this.menus[i][j].case;
          x = cases % this.matrice;
          y = (cases - x) / this.matrice;
          var permited = [];
          permited.push((x + 1) + y * this.matrice);
          permited.push((x - 1) + y * this.matrice);
          permited.push(x + (y + 1) * this.matrice);
          permited.push(x + (y - 1) * this.matrice);
          return permited.indexOf(e.case) >= 0;
        }
      }
    }
    return 0;
  }
  click(e) {
    if (!this.canMove(e))
      return;
    let i: number, j: number, continuer: boolean = true, image: string;
    for (i = 0; i < this.menus.length && continuer; i++) {
      for (j = 0; j < this.menus[i].length; j++) {
        if (this.menus[i][j].index == 0) {
          this.menus[i][j].index = e.index;
          image = this.menus[i][j].image;
          this.menus[i][j].image = e.image;
          e.image = image;
          e.index = 0;
          this.coups++;
          continuer = false;
          break;
        }
      }
    }

    if(this.win())
    {
      if(confirm('Vous avez gagné. Redémarrer ?')){
        this.setConfigGame(this.matrice, this.name);
      }else{
        this.navCtrl.pop();
      }
    }

  }
  ionViewDidLoad() {
    console.log('ionViewDidLoad SubmenuPage');
  }
  toggleMenu() {
    this.menuCtrl.toggle();
  }
  cancel() {
    this.navCtrl.pop();
  }
}
